// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TxContext))]
    partial class TxContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.v1.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssetId"));

                    b.Property<Guid>("AssetCode")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FleetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParticleDeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("AssetId");

                    b.HasIndex("FleetId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Domain.Entities.v1.DataPoint", b =>
                {
                    b.Property<long>("DataPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DataPointId"));

                    b.Property<decimal>("Altitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Angle")
                        .HasColumnType("numeric");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ReadDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Speed")
                        .HasColumnType("numeric");

                    b.HasKey("DataPointId");

                    b.HasIndex("AssetId");

                    b.ToTable("DataPoints");
                });

            modelBuilder.Entity("Domain.Entities.v1.DataPointTemplate", b =>
                {
                    b.Property<long>("DataPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DataPointId"));

                    b.Property<decimal>("Altitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Angle")
                        .HasColumnType("numeric");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ReadDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Speed")
                        .HasColumnType("numeric");

                    b.HasKey("DataPointId");

                    b.HasIndex("AssetId");

                    b.ToTable("DataPointTemplate");
                });

            modelBuilder.Entity("Domain.Entities.v1.Fleet", b =>
                {
                    b.Property<int>("FleetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FleetId"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FleetCode")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FleetId");

                    b.ToTable("Fleets");
                });

            modelBuilder.Entity("Domain.Entities.v1.Asset", b =>
                {
                    b.HasOne("Domain.Entities.v1.Fleet", "Fleet")
                        .WithMany("Assets")
                        .HasForeignKey("FleetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fleet");
                });

            modelBuilder.Entity("Domain.Entities.v1.DataPoint", b =>
                {
                    b.HasOne("Domain.Entities.v1.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Domain.Entities.v1.DataPointTemplate", b =>
                {
                    b.HasOne("Domain.Entities.v1.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Domain.Entities.v1.Fleet", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
