using System;
using Microsoft.EntityFrameworkCore.Migrations;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class addInitialEntities : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterDatabase()
                .Annotation("Npgsql:PostgresExtension:postgis", ",,");

            migrationBuilder.CreateTable(
                name: "Fleets",
                columns: table => new
                {
                    FleetId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    FleetCode = table.Column<Guid>(type: "uuid", nullable: false),
                    Name = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Fleets", x => x.FleetId);
                });

            migrationBuilder.CreateTable(
                name: "Assets",
                columns: table => new
                {
                    AssetId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    AssetCode = table.Column<Guid>(type: "uuid", nullable: false),
                    ParticleDeviceId = table.Column<string>(type: "text", nullable: false),
                    Name = table.Column<string>(type: "text", nullable: false),
                    Description = table.Column<string>(type: "text", nullable: false),
                    Type = table.Column<int>(type: "integer", nullable: false),
                    FleetId = table.Column<int>(type: "integer", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    ModifiedDateTime = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Assets", x => x.AssetId);
                    table.ForeignKey(
                        name: "FK_Assets_Fleets_FleetId",
                        column: x => x.FleetId,
                        principalTable: "Fleets",
                        principalColumn: "FleetId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DataPointTemplate",
                columns: table => new
                {
                    DataPointId = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Location = table.Column<Point>(type: "geometry", nullable: false),
                    Speed = table.Column<decimal>(type: "numeric", nullable: false),
                    Altitude = table.Column<decimal>(type: "numeric", nullable: false),
                    Angle = table.Column<decimal>(type: "numeric", nullable: false),
                    ReadDateTime = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    AssetId = table.Column<int>(type: "integer", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    ModifiedDateTime = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DataPointTemplate", x => x.DataPointId);
                    table.ForeignKey(
                        name: "FK_DataPointTemplate_Assets_AssetId",
                        column: x => x.AssetId,
                        principalTable: "Assets",
                        principalColumn: "AssetId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Assets_FleetId",
                table: "Assets",
                column: "FleetId");

            migrationBuilder.CreateIndex(
                name: "IX_DataPointTemplate_AssetId",
                table: "DataPointTemplate",
                column: "AssetId");

            migrationBuilder.Sql(@"
                CREATE TABLE public.""DataPoints"" (
                    ""DataPointId"" bigint GENERATED BY DEFAULT AS IDENTITY ( MINVALUE 0 NO MAXVALUE START 0 NO CYCLE) NOT NULL,
                    ""Location"" geometry NOT NULL,
                    ""Speed"" numeric,
                    ""Altitude"" numeric,
                    ""Angle"" numeric,
                    ""ReadDateTime"" timestamptz NOT NULL,
                    ""AssetId"" int4 NOT NULL REFERENCES ""Assets"",
                    ""CreateDateTime"" timestamptz NOT NULL,
                    ""ModifiedDateTime"" timestamptz NOT NULL
                ) PARTITION BY RANGE(""CreateDateTime"");
                CREATE INDEX ix_datapoints_assetid ON public.""DataPoints"" (""AssetId"");
            ");

            migrationBuilder.Sql(@"
                create schema if not exists partman;
                create extension pg_partman schema partman;
                create role partman_user with login;
                grant all on schema partman to partman_user;
                grant all on all tables in schema partman to partman_user;
                grant execute on all functions in schema partman to partman_user;
                grant execute on all procedures in schema partman to partman_user;
                grant all on schema public to partman_user;
                grant temporary on database app to partman_user;

                select partman.create_parent(
                p_parent_table := 'public.DataPoints'
                , p_type := 'native'
                , p_control := 'CreateDateTime'
                , p_interval := '1 week'
                , p_template_table := 'public.DataPointTemplate'
                , p_premake := 10
                );


                update partman.part_config
                set
                infinite_time_partitions = true
                , retention = '520 weeks'
                , retention_keep_table = true
                where parent_table = 'public.DataPoints';


                --select cron.schedule('@daily', $$call partman.run_maintenance_proc()$$);
            ");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "DataPoints");

            migrationBuilder.DropTable(
                name: "DataPointTemplate");

            migrationBuilder.DropTable(
                name: "Assets");

            migrationBuilder.DropTable(
                name: "Fleets");
        }
    }
}
